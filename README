Virtual Function Daemon - VFD with QoS Extensions

DANGER: this branch is somewhat unstable when QoS is enabled.  Currently it may be built with 
   DPDK 16.11, however this is soon to change.  This version supports the original function
   set, and adding either a -q on the command line, or the qos option in the config file 
   will cause the new QoS code to be driven.  QoS mode has only been lightly tested and 
   is still a work in progress.

Current State:
   The src/vfd/qos.c module contains our initial prototype (direct NIC fiddling) code. Only
   two of the functions remain in use as the rest of the QoS support can be configured 
   via DPDK API calls.  This is a stepping stone; the next step is to mangle and wedge the
   two functions in the qos.c module into the DPDK ixgbe environment. At that point there 
   will be the need to link against an augmented DPDK.


The following is a brief set of infomration about configuring both VFd proper, and a guest
given to VFd for managment. This will eventually be added to the user's guide and other 
documentation. 

The guest configuration files may now specify traffic class information in the form:
   "queues": [
        { "priority": 0, "share": "10%" },
        { "priority": 1, "share": "10%" },
        { "priority": 2, "share": "10%" },
        { "priority": 3, "share": "10%" },

Where piority is the TC number (higher value higher priority) and share is the percentage of
the traffic class that will be given to the guest. 

Traffic classes and bandwidth groups are defined in the main config for each PF:
   {       "id": "0000:08:00.1",
         "mtu": 9000,
         "enable_loopback": false,
         "pf_driver": "igb-uio",
         "vf_driver": "vfio-pci",
         "vf_oversubscription": false,

         "tclasses": [
               {
                     "name": "best effort",
                     "pri": 0,
                     "llatency": false,
                     "lsp": false,
                     "bsp": false,
                     "max_bw": 100,
                     "min_bw": 10
               },
               {
                     "name": "realtime",
                     "pri": 1,
                     "llatency": false,
                     "lsp": false,
                     "bsp": false,
                     "max_bw": 100,
                     "min_bw": 40
               },
               {
                     "name": "voice",
                     "pri": 2,
                     "llatency": false,
                     "lsp": false,
                     "bsp": false,
                     "max_bw": 100,
                     "min_bw": 40
               },
               {
                     "name": "control",
                     "pri": 3,
                     "llatency": false,
                     "lsp": false,
                     "bsp": false,
                     "max_bw": 100,
                     "min_bw": 10
               }
         ],

         "bw_grps":
         {
               "bwg0": [0],
               "bwg1": [1, 2],
               "bwg2": [3]
         }
   }

Max/min bandwidth for each traffic class is the percentage of the link that the traffic class 
is allocated. Link and bwgroup strict priorities (lsp/bsp) are currently ignored, but should 
be supported in future. If vf_oversubscription is true, then the queue shares for all VFs
configured on a PF are allowed to exceed 100% for any/all traffic classes; they will be adjusted
accordingly when the credits are allocated on the NIC. 

To ensble QoS mode in the config file, rather than using the -q option on the command line, 
set the following field in the main section:
   "enable_qos": true


----------------------------------------------------------------------------------------------------
VFD is a daemon which is used to configures NIC PF/VFs in ways which are not possible through 
the standard ixgbe driver.

The directories here contain the VFD code and some system tools such as the iplex 
command line interface tool which is used to interact with the daemon. 


Some requirements:
   - DPDK version 16.11 (possibly with the need for special AT&T patches (https://github.com/att/dpdk))
   - Linux kernel version  3.13 or later.  (VFd may execute on earlier kernels,
     however odd behavour has been observed with respect to packet dropping in one 
     or both directions with seem to be related to shared memory.)
